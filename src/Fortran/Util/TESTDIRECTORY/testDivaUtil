#!/bin/bash

makeRef=0

echo =============================================
echo =============================================
echo ==                                         ==
echo ==   Procedure to test programs in : UTIL  ==
echo ==                                         ==
echo =============================================
echo =============================================
echo ' '

echo Testing procedure in progress...
echo ================================
rm -f ./testing.log
rm -f ./*.a

cp $divaDir/Bin/convertGHERFile.a ./convertGHERFile.a

# Chech program : alpha.a
# -----------------------
fileToCheck=alpha
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
correlationLength=0.8
penalisation=1
echo $correlationLength $penalisation | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.12 ./OUTPUTS/fort.12.$fileToCheck.$compiler
fi
 
diff -s ./fort.12 ./OUTPUTS/fort.12.$fileToCheck.$compiler >> testing.log
rm ./fort.12
rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : calcest.a
# -------------------------
fileToCheck=calcest
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
nbOfColumn=3
generalizedCrossValidator=10.34
tracea=0.85
cp ./INPUTS/fort.443.$fileToCheck.$compiler ./fort.44
echo $nbOfColumn $generalizedCrossValidator $tracea | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.76 ./OUTPUTS/fort.763.$fileToCheck.$compiler
fi

diff -s ./fort.76 ./OUTPUTS/fort.763.$fileToCheck.$compiler >> testing.log
rm ./fort.76
rm ./fort.44

nbOfColumn=4
cp ./INPUTS/fort.444.$fileToCheck.$compiler ./fort.44
echo $nbOfColumn $generalizedCrossValidator $tracea | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.76 ./OUTPUTS/fort.764.$fileToCheck.$compiler
fi

diff -s ./fort.76 ./OUTPUTS/fort.764.$fileToCheck.$compiler >> testing.log
rm ./fort.76
rm ./fort.44

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : calcestbis.a
# ----------------------------
fileToCheck=calcestbis
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
signalToNoise=1
nbOfColumn=3
tracea=0.85
variance=0.75
cp ./INPUTS/fort.443.$fileToCheck.$compiler ./fort.44
echo $signalToNoise $nbOfColumn $tracea $variance | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.76 ./OUTPUTS/fort.763.$fileToCheck.$compiler
fi

diff -s ./fort.76 ./OUTPUTS/fort.763.$fileToCheck.$compiler >> testing.log
rm ./fort.76
rm ./fort.44

nbOfColumn=4
cp ./INPUTS/fort.444.$fileToCheck.$compiler ./fort.44
echo $signalToNoise $nbOfColumn $tracea $variance | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.76 ./OUTPUTS/fort.764.$fileToCheck.$compiler
fi

diff -s ./fort.76 ./OUTPUTS/fort.764.$fileToCheck.$compiler >> testing.log
rm ./fort.76
rm ./fort.44

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : calcmu.a
# ----------------------------
fileToCheck=calcmu
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
correlationLength=0.8
signalToNoise=1
nbOfColumn=3
xi=16
cp ./INPUTS/fort.443.$fileToCheck.$compiler ./fort.44
echo $correlationLength $signalToNoise $nbOfColumn $xi | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.20 ./OUTPUTS/fort.203.1.$fileToCheck.$compiler
fi

diff -s ./fort.20 ./OUTPUTS/fort.203.1.$fileToCheck.$compiler >> testing.log
rm ./fort.20
rm ./fort.44

nbOfColumn=4
cp ./INPUTS/fort.444.$fileToCheck.$compiler ./fort.44
echo $correlationLength $signalToNoise $nbOfColumn $xi | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.20 ./OUTPUTS/fort.204.1.$fileToCheck.$compiler
fi

diff -s ./fort.20 ./OUTPUTS/fort.204.1.$fileToCheck.$compiler >> testing.log
rm ./fort.20
rm ./fort.44

nbOfColumn=3
xi=1
cp ./INPUTS/fort.443.$fileToCheck.$compiler ./fort.44
echo $correlationLength $signalToNoise $nbOfColumn $xi | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.20 ./OUTPUTS/fort.203.2.$fileToCheck.$compiler
fi

diff -s ./fort.20 ./OUTPUTS/fort.203.2.$fileToCheck.$compiler >> testing.log
rm ./fort.20
rm ./fort.44

nbOfColumn=4
cp ./INPUTS/fort.444.$fileToCheck.$compiler ./fort.44
echo $correlationLength $signalToNoise $nbOfColumn $xi | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.20 ./OUTPUTS/fort.204.2.$fileToCheck.$compiler
fi

diff -s ./fort.20 ./OUTPUTS/fort.204.2.$fileToCheck.$compiler >> testing.log
rm ./fort.20
rm ./fort.44

nbOfColumn=3
xi=0.5
cp ./INPUTS/fort.443.$fileToCheck.$compiler ./fort.44
echo $correlationLength $signalToNoise $nbOfColumn $xi | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.20 ./OUTPUTS/fort.203.3.$fileToCheck.$compiler
fi

diff -s ./fort.20 ./OUTPUTS/fort.203.3.$fileToCheck.$compiler >> testing.log
rm ./fort.20
rm ./fort.44

nbOfColumn=4
cp ./INPUTS/fort.444.$fileToCheck.$compiler ./fort.44
echo $correlationLength $signalToNoise $nbOfColumn $xi | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.20 ./OUTPUTS/fort.204.3.$fileToCheck.$compiler
fi

diff -s ./fort.20 ./OUTPUTS/fort.204.3.$fileToCheck.$compiler >> testing.log
rm ./fort.20
rm ./fort.44

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : cverror.a
# ----------------------------
fileToCheck=cverror
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
exclusionValue=999.
cp ./INPUTS/fort.20.$fileToCheck.$compiler ./fort.20
cp ./INPUTS/fort.21.$fileToCheck.$compiler ./fort.21
echo $exclusionValue | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.22 ./OUTPUTS/fort.22.$fileToCheck.$compiler
fi

diff -s ./fort.22 ./OUTPUTS/fort.22.$fileToCheck.$compiler >> testing.log
rm ./fort.20
rm ./fort.21
rm ./fort.22

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : cverroraii.a
# ----------------------------
fileToCheck=cverroraii
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
exclusionValue=999.
variableData=12.63
cp ./INPUTS/fort.20.$fileToCheck.$compiler ./fort.20
cp ./INPUTS/fort.21.$fileToCheck.$compiler ./fort.21
cp ./INPUTS/fort.22.$fileToCheck.$compiler ./fort.22
cp ./INPUTS/fort.33.$fileToCheck.$compiler ./fort.33
echo $exclusionValue $variableData| ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.23 ./OUTPUTS/fort.23.$fileToCheck.$compiler
fi

diff -s ./fort.23 ./OUTPUTS/fort.23.$fileToCheck.$compiler >> testing.log
rm ./fort.20
rm ./fort.21
rm ./fort.22
rm ./fort.23
rm ./fort.33

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : cvtotalerror.a
# -------------------------------
fileToCheck=cvtotalerror
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
crossValidationValue=10.12
cp ./INPUTS/fort.20.$fileToCheck.$compiler ./fort.20
cp ./INPUTS/fort.21.$fileToCheck.$compiler ./fort.21
echo $crossValidationValue | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.22 ./OUTPUTS/fort.22.$fileToCheck.$compiler
fi

diff -s ./fort.22 ./OUTPUTS/fort.22.$fileToCheck.$compiler >> testing.log
rm ./fort.20
rm ./fort.21
rm ./fort.22

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : datadiff.a
# ---------------------------
fileToCheck=datadiff
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
nbOfColumn=3
exclusionValue=999.
cp ./INPUTS/fort.443.$fileToCheck.$compiler ./fort.44
cp ./INPUTS/fort.453.$fileToCheck.$compiler ./fort.45
echo $nbOfColumn $exclusionValue | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.46 ./OUTPUTS/fort.463.$fileToCheck.$compiler
fi

diff -s ./fort.46 ./OUTPUTS/fort.463.$fileToCheck.$compiler >> testing.log
rm ./fort.44
rm ./fort.46

nbOfColumn=4
cp ./INPUTS/fort.444.$fileToCheck.$compiler ./fort.44
echo $nbOfColumn $exclusionValue | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.46 ./OUTPUTS/fort.464.$fileToCheck.$compiler
fi

diff -s ./fort.46 ./OUTPUTS/fort.464.$fileToCheck.$compiler >> testing.log
rm ./fort.44
rm ./fort.45
rm ./fort.46

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : dbdb2diva.a
# ---------------------------
fileToCheck=dbdb2diva
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.10.$fileToCheck.$compiler ./fort.10
cp ./INPUTS/fort.11.$fileToCheck.$compiler ./fort.11

./$fileToCheck.a >> testing.log
echo fort.12 2 | ./convertGHERFile.a

if [ $makeRef == 1 ]
then
cp ./fort.12 ./OUTPUTS/fort.12.$fileToCheck.$compiler
cp ./fort.20 ./OUTPUTS/fort.20.$fileToCheck.$compiler
fi

diff -s ./fort.12 ./OUTPUTS/fort.12.$fileToCheck.$compiler >> testing.log
diff -s ./fort.20 ./OUTPUTS/fort.20.$fileToCheck.$compiler >> testing.log

rm ./fort.10
rm ./fort.11
rm ./fort.12
rm ./fort.20
rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : filtercv.a
# ---------------------------
fileToCheck=filtercv
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.20.$fileToCheck.$compiler ./fort.20

nbOfLayer=10
nbOfSample=12
echo $nbOfSample $nbOfLayer | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.21 ./OUTPUTS/fort.21.$fileToCheck.$compiler
fi

diff -s ./fort.21 ./OUTPUTS/fort.21.$fileToCheck.$compiler >> testing.log

rm ./fort.20
rm ./fort.21
rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : forgnuplotanalysis.a
# ------------------------------------
fileToCheck=forgnuplotanalysis
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.19a.$fileToCheck.$compiler ./fort.19
cp ./INPUTS/fort.20.$fileToCheck.$compiler ./fort.20
cp ./INPUTS/fort.21.$fileToCheck.$compiler ./fort.21
echo fort.19 1 | ./convertGHERFile.a
echo fort.20 1 | ./convertGHERFile.a
./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.40 ./OUTPUTS/fort.40a.$fileToCheck.$compiler
cp ./fort.41 ./OUTPUTS/fort.41a.$fileToCheck.$compiler
cp ./fort.47 ./OUTPUTS/fort.47a.$fileToCheck.$compiler
cp ./fort.68 ./OUTPUTS/fort.68a.$fileToCheck.$compiler
fi

diff -s ./fort.40 ./OUTPUTS/fort.40a.$fileToCheck.$compiler >> testing.log
diff -s ./fort.41 ./OUTPUTS/fort.41a.$fileToCheck.$compiler >> testing.log
diff -s ./fort.47 ./OUTPUTS/fort.47a.$fileToCheck.$compiler >> testing.log
diff -s ./fort.68 ./OUTPUTS/fort.68a.$fileToCheck.$compiler >> testing.log

rm ./fort.19
rm ./fort.40
rm ./fort.41
rm ./fort.47
rm ./fort.68

cp ./INPUTS/fort.19b.$fileToCheck.$compiler ./fort.19
echo fort.19 1 | ./convertGHERFile.a
./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.40 ./OUTPUTS/fort.40b.$fileToCheck.$compiler
cp ./fort.41 ./OUTPUTS/fort.41b.$fileToCheck.$compiler
cp ./fort.47 ./OUTPUTS/fort.47b.$fileToCheck.$compiler
cp ./fort.68 ./OUTPUTS/fort.68b.$fileToCheck.$compiler
fi

diff -s ./fort.40 ./OUTPUTS/fort.40b.$fileToCheck.$compiler >> testing.log
diff -s ./fort.41 ./OUTPUTS/fort.41b.$fileToCheck.$compiler >> testing.log
diff -s ./fort.47 ./OUTPUTS/fort.47b.$fileToCheck.$compiler >> testing.log
diff -s ./fort.68 ./OUTPUTS/fort.68b.$fileToCheck.$compiler >> testing.log

rm ./fort.19
rm ./fort.20
rm ./fort.21
rm ./fort.40
rm ./fort.41
rm ./fort.47
rm ./fort.68

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : forgnuplotanalysissmooth.a
# ------------------------------------------
fileToCheck=forgnuplotanalysissmooth
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.19a.$fileToCheck.$compiler ./fort.19
cp ./INPUTS/fort.20.$fileToCheck.$compiler ./fort.20
cp ./INPUTS/fort.21.$fileToCheck.$compiler ./fort.21
echo fort.19 1 | ./convertGHERFile.a
echo fort.20 1 | ./convertGHERFile.a
./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.40 ./OUTPUTS/fort.40a.$fileToCheck.$compiler
cp ./fort.41 ./OUTPUTS/fort.41a.$fileToCheck.$compiler
cp ./fort.47 ./OUTPUTS/fort.47a.$fileToCheck.$compiler
cp ./fort.68 ./OUTPUTS/fort.68a.$fileToCheck.$compiler
fi

diff -s ./fort.40 ./OUTPUTS/fort.40a.$fileToCheck.$compiler >> testing.log
diff -s ./fort.41 ./OUTPUTS/fort.41a.$fileToCheck.$compiler >> testing.log
diff -s ./fort.47 ./OUTPUTS/fort.47a.$fileToCheck.$compiler >> testing.log
diff -s ./fort.68 ./OUTPUTS/fort.68a.$fileToCheck.$compiler >> testing.log

rm ./fort.19
rm ./fort.40
rm ./fort.41
rm ./fort.47
rm ./fort.68

cp ./INPUTS/fort.19b.$fileToCheck.$compiler ./fort.19
echo fort.19 1 | ./convertGHERFile.a
./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.40 ./OUTPUTS/fort.40b.$fileToCheck.$compiler
cp ./fort.41 ./OUTPUTS/fort.41b.$fileToCheck.$compiler
cp ./fort.47 ./OUTPUTS/fort.47b.$fileToCheck.$compiler
cp ./fort.68 ./OUTPUTS/fort.68b.$fileToCheck.$compiler
fi

diff -s ./fort.40 ./OUTPUTS/fort.40b.$fileToCheck.$compiler >> testing.log
diff -s ./fort.41 ./OUTPUTS/fort.41b.$fileToCheck.$compiler >> testing.log
diff -s ./fort.47 ./OUTPUTS/fort.47b.$fileToCheck.$compiler >> testing.log
diff -s ./fort.68 ./OUTPUTS/fort.68b.$fileToCheck.$compiler >> testing.log

rm ./fort.19
rm ./fort.20
rm ./fort.21
rm ./fort.40
rm ./fort.41
rm ./fort.47
rm ./fort.68

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : forgnuplotcoast.a
# ---------------------------------
fileToCheck=forgnuplotcoast
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.66.$fileToCheck.$compiler ./fort.66
./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.67 ./OUTPUTS/fort.67.$fileToCheck.$compiler
fi

diff -s ./fort.67 ./OUTPUTS/fort.67.$fileToCheck.$compiler >> testing.log

rm ./fort.66
rm ./fort.67

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : forgnuplotmesh.a
# ---------------------------------
fileToCheck=forgnuplotmesh
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.22.$fileToCheck.$compiler ./fort.22
cp ./INPUTS/fort.23.$fileToCheck.$compiler ./fort.23
./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.69 ./OUTPUTS/fort.69.$fileToCheck.$compiler
fi

diff -s ./fort.69 ./OUTPUTS/fort.69.$fileToCheck.$compiler >> testing.log

rm ./fort.22
rm ./fort.23
rm ./fort.69

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : forgnuplotmeshl.a
# ---------------------------------
fileToCheck=forgnuplotmeshl
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.22.$fileToCheck.$compiler ./fort.22
cp ./INPUTS/fort.23.$fileToCheck.$compiler ./fort.23
./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.71 ./OUTPUTS/fort.71.$fileToCheck.$compiler
fi

diff -s ./fort.71 ./OUTPUTS/fort.71.$fileToCheck.$compiler >> testing.log

rm ./fort.22
rm ./fort.23
rm ./fort.71

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : forgnuplotuv.a
# ---------------------------------
fileToCheck=forgnuplotuv
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.30.$fileToCheck.$compiler ./fort.30
cp ./INPUTS/fort.31.$fileToCheck.$compiler ./fort.31
cp ./INPUTS/fort.32.$fileToCheck.$compiler ./fort.32
echo fort.30 1 | ./convertGHERFile.a
echo fort.31 1 | ./convertGHERFile.a
./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.55 ./OUTPUTS/fort.55.$fileToCheck.$compiler
fi

diff -s ./fort.55 ./OUTPUTS/fort.55.$fileToCheck.$compiler >> testing.log

rm ./fort.30
rm ./fort.31
rm ./fort.32
rm ./fort.55

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : ghermask.a
# ---------------------------
fileToCheck=ghermask
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.98.$fileToCheck.$compiler ./fort.98
cp ./INPUTS/fort.99.$fileToCheck.$compiler ./fort.99
echo fort.99 1 | ./convertGHERFile.a
echo fort.98 1 | ./convertGHERFile.a
echo $nbOfRow $nbOfColumn $exclusionValue | ./$fileToCheck.a >> testing.log
echo fort.97 2 | ./convertGHERFile.a

if [ $makeRef == 1 ]
then
cp ./fort.97 ./OUTPUTS/fort.97.$fileToCheck.$compiler
fi

diff -s ./fort.97 ./OUTPUTS/fort.97.$fileToCheck.$compiler >> testing.log

rm ./fort.97
rm ./fort.98
rm ./fort.99
rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : ghervalex.a
# ---------------------------
fileToCheck=ghervalex
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
nbOfRow=4
nbOfColumn=4
exclusionValue=999.
echo $nbOfRow $nbOfColumn $exclusionValue | ./$fileToCheck.a >> testing.log
echo fort.84 2 | ./convertGHERFile.a

if [ $makeRef == 1 ]
then
cp ./fort.84 ./OUTPUTS/fort.84.$fileToCheck.$compiler
fi

diff -s ./fort.84 ./OUTPUTS/fort.84.$fileToCheck.$compiler >> testing.log

rm ./fort.84
rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : griddef.a
# ---------------------------
fileToCheck=griddef
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.13.$fileToCheck.$compiler ./fort.13
./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.13 ./OUTPUTS/fort.13.$fileToCheck.$compiler
fi

diff -s ./fort.13 ./OUTPUTS/fort.13.$fileToCheck.$compiler >> testing.log

rm ./fort.13
rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : gridpointlist.a
# -------------------------------
fileToCheck=gridpointlist
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.20.$fileToCheck.$compiler ./fort.20
cp ./INPUTS/fort.21.$fileToCheck.$compiler ./fort.21
echo fort.20 1 | ./convertGHERFile.a
./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.22 ./OUTPUTS/fort.22.$fileToCheck.$compiler
fi

diff -s ./fort.22 ./OUTPUTS/fort.22.$fileToCheck.$compiler >> testing.log

rm ./fort.20
rm ./fort.21
rm ./fort.22
rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : inversecont.a
# -------------------------------
fileToCheck=inversecont
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.10.$fileToCheck.$compiler ./fort.10
./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./coastinv.cont ./OUTPUTS/coastinv.cont.$fileToCheck.$compiler
fi

diff -s ./coastinv.cont ./OUTPUTS/coastinv.cont.$fileToCheck.$compiler >> testing.log

rm ./fort.10
rm ./coastinv.cont
rm ./$fileToCheck.*
echo ' ' >> testing.log


# Chech program : lcelem.a
# ---------------------------
fileToCheck=lcelem
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
isdens=1
lengthScale=25.
echo $isdens $lengthScale | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.11 ./OUTPUTS/fort.11.$fileToCheck.$compiler
fi

diff -s ./fort.11 ./OUTPUTS/fort.11.$fileToCheck.$compiler >> testing.log

rm ./fort.11
rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : lincom.a
# ------------------------
fileToCheck=lincom
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.20.$fileToCheck.$compiler ./fort.20
cp ./INPUTS/fort.10.$fileToCheck.$compiler ./fort.10
cp ./INPUTS/fort.11.$fileToCheck.$compiler ./fort.11
echo fort.10 1 | ./convertGHERFile.a
echo fort.11 1 | ./convertGHERFile.a
./$fileToCheck.a >> testing.log
echo fort.12 2 | ./convertGHERFile.a
echo fort.13 2 | ./convertGHERFile.a

if [ $makeRef == 1 ]
then
cp ./fort.12 ./OUTPUTS/fort.12.$fileToCheck.$compiler
cp ./fort.13 ./OUTPUTS/fort.13.$fileToCheck.$compiler
fi
 
diff -s ./fort.12 ./OUTPUTS/fort.12.$fileToCheck.$compiler >> testing.log
diff -s ./fort.13 ./OUTPUTS/fort.13.$fileToCheck.$compiler >> testing.log
rm ./fort.10
rm ./fort.11
rm ./fort.20
rm ./fort.12
rm ./fort.13
rm ./$fileToCheck.*
echo ' ' >> testing.log


# Chech program : multiply.a
# ---------------------------
fileToCheck=multiply
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
value1=25.
value2=13.
echo $value1 $value2 | ./$fileToCheck.a >> $fileToCheck.log

if [ $makeRef == 1 ]
then
cp ./$fileToCheck.log ./OUTPUTS/$fileToCheck.$compiler
fi

diff -s ./$fileToCheck.log ./OUTPUTS/$fileToCheck.$compiler >> testing.log

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : subsampling.a
# -------------------------------
fileToCheck=subsampling
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.203.$fileToCheck.$compiler ./fort.20
nbOfSample=1
nbOfData=2
seed=35
nbOfColumn=3
echo $nbOfSample $nbOfData $seed $nbOfColumn | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.44 ./OUTPUTS/fort.443.$fileToCheck.$compiler
cp ./fort.45 ./OUTPUTS/fort.453.$fileToCheck.$compiler
fi

diff -s ./fort.44 ./OUTPUTS/fort.443.$fileToCheck.$compiler >> testing.log
diff -s ./fort.45 ./OUTPUTS/fort.453.$fileToCheck.$compiler >> testing.log

rm ./fort.44
rm ./fort.45

echo ' ' >> testing.log

cp ./INPUTS/fort.204.$fileToCheck.$compiler ./fort.20
nbOfSample=1
nbOfData=2
seed=35
nbOfColumn=4
echo $nbOfSample $nbOfData $seed $nbOfColumn | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.44 ./OUTPUTS/fort.444.$fileToCheck.$compiler
cp ./fort.45 ./OUTPUTS/fort.454.$fileToCheck.$compiler
fi

diff -s ./fort.44 ./OUTPUTS/fort.444.$fileToCheck.$compiler >> testing.log
diff -s ./fort.45 ./OUTPUTS/fort.454.$fileToCheck.$compiler >> testing.log

rm ./fort.44
rm ./fort.45
rm ./fort.20
rm ./$fileToCheck.*

echo ' ' >> testing.log

# Chech program : sumgrid.a
# ---------------------------
fileToCheck=sumgrid
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
exclusionValue=999.
nbOfRow=5
nbOfColumn=10
cp ./INPUTS/fort.20.$fileToCheck.$compiler ./fort.20
cp ./INPUTS/fort.21.$fileToCheck.$compiler ./fort.21
echo $exclusionValue $nbOfRow $nbOfColumn | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.22 ./OUTPUTS/fort.22.$fileToCheck.$compiler
fi

diff -s ./fort.22 ./OUTPUTS/fort.22.$fileToCheck.$compiler >> testing.log
rm ./fort.20
rm ./fort.21
rm ./fort.22 

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : sumup.a
# ---------------------------
fileToCheck=sumup
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
exclusionValue=999.
cp ./INPUTS/fort.20.$fileToCheck.$compiler ./fort.20
cp ./INPUTS/fort.21.$fileToCheck.$compiler ./fort.21
echo $exclusionValue | ./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.22 ./OUTPUTS/fort.22.$fileToCheck.$compiler
fi

diff -s ./fort.22 ./OUTPUTS/fort.22.$fileToCheck.$compiler >> testing.log
rm ./fort.20
rm ./fort.21
rm ./fort.22 

rm ./$fileToCheck.*
echo ' ' >> testing.log

# Chech program : topoprep.a
# ---------------------------
fileToCheck=topoprep
echo Test : $fileToCheck
echo ------
echo Test : $fileToCheck >> testing.log
echo ------ >> testing.log

cp $divaDir/Bin/$fileToCheck.a ./$fileToCheck.a
cp ./INPUTS/fort.10.$fileToCheck.$compiler ./fort.10
./$fileToCheck.a >> testing.log

if [ $makeRef == 1 ]
then
cp ./fort.11 ./OUTPUTS/fort.11.$fileToCheck.$compiler
cp ./fort.20 ./OUTPUTS/fort.20.$fileToCheck.$compiler
cp ./fort.30 ./OUTPUTS/fort.30.$fileToCheck.$compiler
fi

diff -s ./fort.11 ./OUTPUTS/fort.11.$fileToCheck.$compiler >> testing.log
diff -s ./fort.20 ./OUTPUTS/fort.20.$fileToCheck.$compiler >> testing.log
diff -s ./fort.30 ./OUTPUTS/fort.30.$fileToCheck.$compiler >> testing.log
rm ./fort.10
rm ./fort.11
rm ./fort.20
rm ./fort.30

rm ./$fileToCheck.*
echo ' ' >> testing.log

echo Testing procedure finished
echo ==========================
echo Check 'testing.log'

rm -f convertGHERFile.a 
